package routes

import (
	"github.com/cyber-mountain-man/learn-go-with-cyber-mountain-man/22-controllers/internal/controllers"
	"github.com/go-chi/chi/v5"
)

// SetupRouter initializes and returns a fully configured chi.Router
func SetupRouter() *chi.Mux {
	r := chi.NewRouter()

	// -----------------------------
	// 1Ô∏è‚É£ CONTROLLER INITIALIZATION
	// -----------------------------
	// Create an instance of the UserController.
	// In real apps, you might inject a database or service layer here.
	userController := controllers.NewUserController()

	// -----------------------------
	// 2Ô∏è‚É£ DEFINE ROUTES USING GROUPS
	// -----------------------------
	// All /users routes are handled here
	r.Route("/users", func(r chi.Router) {
		// GET /users/{userID} ‚Üí handled by GetUser method
		r.Get("/{userID}", userController.GetUser)

		// GET /users ‚Üí handled by ListUsers method
		r.Get("/", userController.ListUsers)
	})

	// Return the fully configured router to main.go
	return r
}

/*
üß† LESSON 22 - CONTROLLERS: ROUTER LAYER

‚úÖ What You Learn:
- How to cleanly wire route paths to controller methods
- How to use chi route groups for better organization (/users)
- How to initialize controller instances before binding routes

‚úÖ Why This Matters:
- Keeps routing configuration separate from handler logic
- Makes it easy to grow your app modularly (e.g., add /products, /admin)
- Supports dependency injection ‚Äî crucial for testing and real-world projects

This file bridges your entry point (main.go) and your business logic (controllers).
It‚Äôs where route paths meet functionality ‚Äî cleanly and professionally.
*/
